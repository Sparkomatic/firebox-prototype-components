import * as React from "react";
import { PropertyControls, ControlType, Frame, animate, FramerAnimation, PropertyStore, RenderTarget } from "framer";
import { string } from "prop-types";
import styled from "styled-components";
import { JSONArray } from "framer/types/src/render/types/JSONData";
// import { State } from "framer/types/src/events/recognizer/GestureRecognizer";

const StyledDropdown = styled("div")`
  position: relative;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: left;
  justify-content: left;
  border-radius: 2px;
  padding: 2rem;
  color: white;
  background-color: red;
  select {
    border: 3px solid #000;
  }
`;

interface Props {
  text: string;
  padding: string;
  color: string;
  backgroundColor: string;
  width: number;
  height: number;
}

//   interface State {
//     selectedOption1: {value: string, label: string}
//   }

interface State {
  // selectedOption: { id: number; title: string; selected: boolean; key: string };
  listOpen: boolean,
  location: JSONArray
}

export class ul_drop_down extends React.Component<Props, State> {
  private selectRef: React.RefObject<HTMLSelectElement>;

  // constructor(props) {
  //   super(props);
  //   // this.selectRef = React.createRef();
  //   // this.handleChange = this.handleChange.bind(this);
  //   // this.state = { selectedOption: location[0], listOpen: false };
  // }
  
  state = {
    listOpen: false,
    location: [
      {
          id: 0,
          title: 'New York',
          selected: false,
          key: 'location'
      },
      {
        id: 1,
        title: 'Dublin',
        selected: false,
        key: 'location'
      },
      {
        id: 2,
        title: 'California',
        selected: false,
        key: 'location'
      },
      {
        id: 3,
        title: 'Istanbul',
        selected: false,
        key: 'location'
      },
      {
        id: 4,
        title: 'Izmir',
        selected: false,
        key: 'location'
      },
      {
        id: 5,
        title: 'Oslo',
        selected: false,
        key: 'location'
      }
    ]
  }

  toggleList = () => {
    const listOpen = !this.state.listOpen
    this.setState({ ...this.state, listOpen })
    console.log("state listOpen is ", this.state.listOpen);
  }

  multiSelectItem = (id, key) => {
    console.log("item is ", id);
    console.log("key is ", key);
    
    let temp = this.state[key];
    temp[id].selected = !temp[id].selected;
    this.setState({
      ...this.state[key], temp
    })
    console.log("is item selected ", temp[id].selected);
    console.log("title is ", temp[id].title);
  }

  selectItem = (id, key) => {
    let temp = this.state[key]
    temp.map(item => {
      item.selected = false;
    })
    temp[id].selected = !temp[id].selected;
    console.log("all selected is ", temp);
    // find a cleaner way to just false the previous one and true the new one rather than a full map
  }

  // Set default properties
  static defaultProps = {
    text: "Hello World!",
    color: "blue",
    backgroundColor: "purple",
    padding: "1rem",
    width: 220,
    height: 48,
    // selectedOption: location[0]
  };

  // Items shown in property panel
  static propertyControls: PropertyControls = {
    text: { type: ControlType.String, title: "Text" }
  };

  render() {
    // const options1 = [
    //   { value: "", label: "Default" },
    //   { value: "one", label: "One" },
    //   { value: "two", label: "Two" }
    // ];

    return (

      <StyledDropdown
        color={this.props.text}
        backgroundColor={this.props.backgroundColor}
        padding={this.props.padding}
        width={this.props.width}
        height={this.props.height}
        // onTap={this.onTap}
        // selectedOption={this.state.selectedOption}
      >
        <div className="dd-wrapper">
          <div className="dd-header" onClick={() => this.toggleList()}>  
            <div className="dd-header-title">{this.state.location[0].title}</div>
          </div>
          {this.state.listOpen && 
          
          <ul className="dd-list">
          {this.state.location.map(item => (
            <li className="dd-list-item" key={item.title} onClick={() => this.selectItem(item.id, item.key)}>
              {item.title}
            </li>
          ))}
        </ul>
        }

        </div>
      </StyledDropdown>
    );
  }
}
